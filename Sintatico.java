/* Generated By:JavaCC: Do not edit this line. Sintatico.java */
class Sintatico implements SintaticoConstants {
static public void main( String[] args )
      throws ParseException, TokenMgrError {
            Sintatico parser;
            /* Estas classes serao geradas pelo JavaCC */
            if(args.length == 0){
                        System.out.println("LanguageCassiano_Elvis: Reading from keyboard input...");
                        parser = new Sintatico( System.in );
                  }else if(args.length == 1){
                        System.out.println("LanguageCassiano_Elvis: Reading from file" +args[0]);
                        try {
                              parser = new Sintatico(new java.io.FileInputStream(args[0]));
                        }catch(java.io.FileNotFoundException e){
                              System.out.println("LanguageCassiano_Elvis: file" +args[0]+ "not found.");
                              return;
                        }
                  }else {
                        System.out.println("LanguageCassiano_Elvis:  Usage is one of:");
                        System.out.println("         java fileJavaCC < inputfile");
                        System.out.println("OR");
                        System.out.println("         java fileJavaCC inputfile");
                        return;
                  }
                  try{
                  parser.Start();
                  System.out.println("LanguageCassiano_Elvis:  fileJavaCC parsed successfully.");
                  } catch (ParseException e) {
                  System.out.println(e.getMessage());
                  System.out.println("LanguageCassiano_Elvis:  Encountered errors during parse.");
                  }
            }

// ---------------------------------------------------------
// Sintatico
// ---------------------------------------------------------

/*****************************************
 * THE GRAMMAR SPECIFICATION STARTS HERE *
 *****************************************/
  final public void Start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIN:
      main();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
  }

  final public void main() throws ParseException {
    jj_consume_token(MAIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
    case LEFTBRACE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        jj_consume_token(LEFTPAREN);
        jj_consume_token(RIGHTPAREN);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(LEFTBRACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    FieldDeclaration();
  }

  final public void FieldDeclaration() throws ParseException {
    Type();
    VariableDeclarator();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(39);
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(40);
      jj_consume_token(41);
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE:
      ArrayInitializer();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
    case 44:
    case 45:
      Expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
    jj_consume_token(LEFTBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case LEFTBRACE:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
    case 44:
    case 45:
      label_3:
      while (true) {
        VariableInitializer();
        jj_consume_token(39);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case IDENTIFIER:
        case LEFTPAREN:
        case LEFTBRACE:
        case INCREMENT:
        case DECREMENT:
        case PLUS:
        case MINUS:
        case 44:
        case 45:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTBRACE);
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      PrimitiveType();
      break;
    case IDENTIFIER:
      Name();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(40);
      jj_consume_token(41);
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void Expression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
      AssignmentOperator();
      Expression();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      Expression();
      jj_consume_token(43);
      ConditionalExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOEQUAL:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOEQUAL:
        jj_consume_token(NOEQUAL);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATERTHAN:
      case LESSTHAN:
      case LESSEQUAL:
      case GREATEREQUAL:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case LESSEQUAL:
        jj_consume_token(LESSEQUAL);
        break;
      case GREATEREQUAL:
        jj_consume_token(GREATEREQUAL);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCREMENT:
      PreIncrementExpression();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case DECREMENT:
    case 44:
    case 45:
      PreDecrementExpression();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCREMENT);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECREMENT:
      jj_consume_token(DECREMENT);
      PrimaryExpression();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case 44:
    case 45:
      PostfixExpression();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PostfixExpression() throws ParseException {
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case 44:
    case 45:
      Literal();
      break;
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      Expression();
      jj_consume_token(RIGHTPAREN);
      break;
    case IDENTIFIER:
      Name();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case 44:
    case 45:
      BooleanLiteral();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      break;
    case 45:
      jj_consume_token(45);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACE:
      Block();
      break;
    case SEMICOLON:
      EmptyStatement();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case 44:
    case 45:
      StatementExpression();
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      IfStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case 47:
      ReturnStatement();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Block() throws ParseException {
    jj_consume_token(LEFTBRACE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INT:
      case FOR:
      case IF:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LEFTPAREN:
      case LEFTBRACE:
      case SEMICOLON:
      case INCREMENT:
      case DECREMENT:
      case 44:
      case 45:
      case 47:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_11;
      }
      BlockStatement();
    }
    jj_consume_token(RIGHTBRACE);
  }

  final public void BlockStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case IDENTIFIER:
      Type();
      jj_consume_token(IDENTIFIER);
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
      break;
    case FOR:
    case IF:
    case INTEGER_LITERAL:
    case LEFTPAREN:
    case LEFTBRACE:
    case SEMICOLON:
    case INCREMENT:
    case DECREMENT:
    case 44:
    case 45:
    case 47:
      Statement();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    Type();
    VariableDeclarator();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
      jj_consume_token(39);
      VariableDeclarator();
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
      PreIncrementExpression();
      break;
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case DECREMENT:
    case 44:
    case 45:
      PreDecrementExpression();
      break;
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCREMENT:
      case DECREMENT:
      case PLUSASSIGN:
      case MINUSASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENT:
          jj_consume_token(INCREMENT);
          break;
        case DECREMENT:
          jj_consume_token(DECREMENT);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LEFTPAREN);
    Expression();
    jj_consume_token(RIGHTPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      Statement();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case 44:
    case 45:
      ForInit();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
    case 44:
    case 45:
      Expression();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case 44:
    case 45:
      ForUpdate();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
    Statement();
  }

  final public void ForInit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
    case IDENTIFIER:
      Type();
      jj_consume_token(IDENTIFIER);
      LocalVariableDeclaration();
      break;
    case INTEGER_LITERAL:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case 44:
    case 45:
      StatementExpressionList();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      jj_consume_token(39);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(47);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFTPAREN:
    case INCREMENT:
    case DECREMENT:
    case PLUS:
    case MINUS:
    case 44:
    case 45:
      Expression();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  /** Generated Token Manager. */
  public SintaticoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x20000,0xa0000,0x0,0x400000,0x0,0x800a5000,0x800a5000,0x800a5000,0x41c0,0x0,0x1c0,0x400000,0x400000,0x0,0x20000000,0x40000000,0x12000000,0x12000000,0xd800000,0xd800000,0x0,0x0,0x0,0x0,0x0,0x80025000,0x25000,0x80000000,0x80000000,0x25000,0x1000,0x0,0x802a5600,0x802a57c0,0x802a57c0,0x0,0x80400000,0x80400000,0x80025000,0x0,0x800251c0,0x80025000,0x80025000,0x800251c0,0x0,0x80025000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x80,0x0,0x100,0x3007,0x3007,0x3007,0x0,0x100,0x0,0x60,0x60,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x18,0x18,0x6,0x3007,0x3001,0x1,0x1,0x3000,0x3000,0x3000,0xb001,0xb001,0xb001,0x80,0x61,0x61,0x3001,0x4000,0x3001,0x3007,0x3001,0x3001,0x80,0x3007,};
   }

  /** Constructor with InputStream. */
  public Sintatico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sintatico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SintaticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Sintatico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SintaticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Sintatico(SintaticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SintaticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

      //}
}
